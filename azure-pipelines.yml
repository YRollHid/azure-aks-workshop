# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: 'YRollHid.azure-aks-workshop'

stages:
- stage: 'DeployAKS'
  displayName: 'Deploy AKS'
  jobs:
  - job: 'DeployAKS'
    displayName: 'Deploy AKS'
    steps:
    - task: DownloadSecureFile@1
      name: nodePubKey
      displayName: 'Download SSH Pub Key'
      inputs:
        secureFile: 'azure-aks-workshop-id_rsa.pub'
    - task: AzureCLI@2
      displayName: 'Deploy AKS'
      inputs:
        azureSubscription: 'AzureAksWorkShopSc'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'azure_deployment/azure-aks-deploy.sh'
        arguments: '$(nodePubKey.secureFilePath) $(aksClusterName)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      env:
        nodePubKey.secureFilePath: $(nodePubKey.secureFilePath)

- stage: 'DeployACR'
  displayName: 'Deploy ACR & Build images'
  jobs:
  - job: 'DeployACR'
    displayName: 'Deploy ACR & Build images'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy ACR & Build images'
      inputs:
        azureSubscription: 'AzureAksWorkShopSc'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: 'azure_deployment/azure-acr-deploy.sh'
        arguments: '$(pathRatingsAPI) $(pathRatingsWeb) $(aksClusterName)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

- stage: 'DeployContainers'
  displayName: 'Deploy Containers'
  jobs:
    - job: 'DeployMongoDB'
      displayName: 'Deploy MongoDB'
      steps:
      - task: AzureCLI@2
        displayName: 'Create ns ratingsapp'
        inputs:
          azureSubscription: 'AzureAksWorkShopSc'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az aks get-credentials -g aksworkshop -n aksworkshop-28102021 --admin && kubectl create namespace ratingsapp --dry-run=client -o yaml | kubectl apply -f -'
      - task: HelmDeploy@0
        displayName: 'Add bitnami Helm Repo'
        enabled: true
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          command: 'repo'
          arguments: 'add bitnami https://charts.bitnami.com/bitnami'
      - task: HelmDeploy@0
        displayName: 'Deploy MongoDB'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          namespace: 'ratingsapp'
          command: 'upgrade'
          chartType: 'Name'
          chartName: 'bitnami/mongodb'
          releaseName: 'ratings'
          overrideValues: 'auth.username=$(mongodbuser),auth.password=$(mongodbpass),auth.database=ratingsdb'
      - task: Kubernetes@1
        displayName: 'Delete mongosecret'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          namespace: 'ratingsapp'
          command: 'delete'
          arguments: 'secret mongosecret --ignore-not-found'
      - task: Kubernetes@1
        displayName: 'Create mongosecret'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          namespace: 'ratingsapp'
          command: 'create'
          arguments: 'secret generic mongosecret --from-literal=MONGOCONNECTION="mongodb://$(mongodbuser):$(mongodbpass)@ratings-mongodb.ratingsapp:27017/ratingsdb"'
    
    - job: 'DeployIngress'
      displayName: 'Deploy NGINX Ingress'
      steps:
      - task: AzureCLI@2
        displayName: 'Create ns ingress'
        inputs:
          azureSubscription: 'AzureAksWorkShopSc'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az aks get-credentials -g aksworkshop -n aksworkshop-28102021 --admin && kubectl create namespace ingress --dry-run=client -o yaml | kubectl apply -f -'
      - task: HelmDeploy@0
        displayName: 'Add ingress-nginx Helm Repo'
        enabled: true
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          command: 'repo'
          arguments: 'add ingress-nginx https://kubernetes.github.io/ingress-nginx'
      - task: HelmDeploy@0
        displayName: 'Deploy nginx-ingress'
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          namespace: 'ingress'
          command: 'upgrade'
          chartType: 'Name'
          chartName: 'ingress-nginx/ingress-nginx'
          releaseName: 'nginx-ingress'
          overrideValues: 'controller.replicaCount=2,controller.nodeSelector."beta\.kubernetes\.io/os"=linux,defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux'

    - job: 'DeployApiWeb'
      displayName: 'Deploy API & Web'
      dependsOn: DeployMongoDB
      steps:
      - task: Kubernetes@1
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscriptionEndpoint: 'AzureAksWorkShopSc'
          azureResourceGroup: 'aksworkshop'
          kubernetesCluster: 'aksworkshop-28102021'
          namespace: 'ratingsapp'
          command: 'apply'
          arguments: '-f $(System.DefaultWorkingDirectory)/manifests_deployment'
      

